# template.yaml

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-rust

  Sample AWS SAM template to deploy a Rust-based Lambda function
  using Diesel with PostgreSQL. Includes a custom Lambda Layer 
  for the `libpq` C library, required for Diesel's `postgres` backend.

Globals:
  Function:
    Timeout: 30
    MemorySize: 512

Resources:

  # ─────────────────────────────────────────────────────────────────────────────
  # LibpqLayer
  #
  # This defines a custom Lambda Layer that packages the `libpq.so` shared 
  # library and header files needed by Diesel's `postgres` backend. The layer 
  # is built using a `makefile` build method, and AWS SAM automatically 
  # runs the `build-LibpqLayer` target from the Makefile to generate the 
  # correct file structure inside the `.aws-sam/build/LibpqLayer/opt/` directory.
  #
  # These files become accessible to Lambda functions at `/opt/lib` and 
  # `/opt/include/libpq`, and the function must set corresponding environment 
  # variables to find them at runtime and during build (for `pq-sys`).
  # ─────────────────────────────────────────────────────────────────────────────
  LibpqLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile               # Custom Makefile defines how to build the layer
      BuildArchitecture: x86_64           # Build architecture for compatibility
    Properties:
      ContentUri: .                       # Root of the repo is passed to `make build-LibpqLayer`
      Description: PG deps for diesel     # Human-friendly layer description
      CompatibleRuntimes:
        - provided.al2                    # Lambda runtime for Rust with Cargo Lambda
      RetentionPolicy: Delete             # Clean up layer when deleted

  # ─────────────────────────────────────────────────────────────────────────────
  # HelloWorldFunction
  #
  # This is the main Lambda function built using `cargo lambda build`.
  # It depends on Diesel with the `postgres` backend, and uses the `LibpqLayer`
  # to provide the `libpq` dynamic library at runtime.
  #
  # Environment variables are used during both build and runtime to configure
  # linking and dynamic library loading (`LD_LIBRARY_PATH`, `PQ_LIB_DIR`, etc).
  # The function is triggered by API Gateway with a catch-all `{proxy+}` route.
  # ─────────────────────────────────────────────────────────────────────────────
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda        # Uses Cargo Lambda to compile Rust code
      BuildProperties:
        artifact_executable_name: bootstrap # This aligns with `cargo.toml` [[bin]] name = "bootstrap" and [package] default-run = "bootstrap":
        binary: bootstrap # This aligns with `cargo.toml` [[bin]] name = "bootstrap" and [package] default-run = "bootstrap":

    Properties:
      CodeUri: ./rust_app                  # Points to the Cargo.toml directory
      Handler: bootstrap                   # Executable generated by Cargo Lambda
      Runtime: provided.al2                # Rust custom runtime for Lambda
      Layers:
        - !Ref LibpqLayer                  # Mounts our custom libpq layer under /opt
      Architectures:
        - x86_64
      Environment:
        Variables:
          # These paths match where the Lambda layer will be mounted.
          # They are used by `pq-sys` (build-time) and by the binary at runtime.
          PQ_LIB_DIR: /opt/lib             # libpq.so search path (used by `pq-sys`)
          PQ_INCLUDE_DIR: /opt/include/libpq # Header path (used by `pq-sys`)
          LD_LIBRARY_PATH: /opt/lib        # Required for dynamic linking at runtime

          # Other useful runtime config
          RUST_LOG: debug
          PGSSLMODE: disabled
          RUST_BACKTRACE: "1"

          # Local or Docker test DB connection string
          DATABASE_URL: postgres://root:password@test-db:5432/test?sslmode=disable

      Events:
        HelloWorld:
          Type: Api                        # API Gateway trigger
          Properties:
            Path: /{proxy+}                # Catch-all route for any method/path
            Method: ANY

Outputs:

  # ─────────────────────────────────────────────────────────────────────────────
  # Outputs for convenience when deploying
  # ─────────────────────────────────────────────────────────────────────────────

  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"

  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn

  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
